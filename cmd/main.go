package main

import (
	"log"
	"net/http"
	"os"
	"time"

	"github.com/fatih/color"
	"github.com/go-chi/chi/v5"
	"github.com/go-chi/chi/v5/middleware"
	"github.com/joho/godotenv"

	// —Ö–µ–Ω–¥–ª–µ—Ä
	"anketa_ai_analysis/internal/transport/http/handler"

	// —Å–µ—Ä–≤–∏—Å –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
	"anketa_ai_analysis/internal/service/anketa"
)

func main() {
	color.Cyan("üöÄ Starting Anketa Analysis Service...")

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ–∫—Å–∏
	proxy := "socks5://127.0.0.1:1080"
	os.Setenv("ALL_PROXY", proxy)
	log.Printf("üåê Proxy set: %s", proxy)

	// –ó–∞–≥—Ä—É–∂–∞–µ–º .env
	color.Yellow("üì¶ Loading .env file...")
	if err := godotenv.Load(); err != nil {
		log.Fatalf("‚ùå Error loading .env file: %v", err)
	}
	color.Green("‚úÖ .env loaded successfully")

	// –ß–∏—Ç–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
	modelName := os.Getenv("DEEPSEEK_CHAT")
	provider := os.Getenv("DEEPSEEK")
	port := os.Getenv("PORT")

	color.Blue("üîß Configuration:")
	log.Printf("   MODEL_NAME: %s", modelName)
	log.Printf("   PROVIDER:   %s", provider)
	log.Printf("   PORT:       %s", port)

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å
	color.Yellow("üîå Initializing analysis service...")
	svc := anketa.NewAnalysis(modelName, provider)
	color.Green("‚úÖ Service initialized")

	// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ä–æ—É—Ç–µ—Ä
	r := chi.NewRouter()
	r.Use(middleware.RequestID)
	r.Use(middleware.RealIP)
	r.Use(middleware.Recoverer)
	r.Use(middleware.Logger)
	r.Use(middleware.Timeout(60 * time.Second))

	// –•–µ–Ω–¥–ª–µ—Ä
	r.Post("/analysis", handler.NewAnalysisHandler(svc))

	// Healthcheck
	r.Get("/healthz", func(w http.ResponseWriter, r *http.Request) {
		w.WriteHeader(http.StatusOK)
		_, _ = w.Write([]byte("ok"))
	})

	// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
	addr := ":" + port
	color.Magenta("üåê Server starting on http://localhost%s", addr)
	if err := http.ListenAndServe(addr, r); err != nil {
		log.Fatalf("‚ùå Server failed to start: %v", err)
	}
}
